=======================================
Testing function that adds two integers
=======================================

Importing file
==============
    >>> add_integer = __import__('0-add_integer').add_integer

Function
========
Parameters a and b must be a float or int, otherwise raise a TypeError exception with the message.
Function returns the addition of two cast integers

Numbers
=======

    #Two positive int
    >>> add_integer(2, 3)
    5

    #Two negative int
    >>> add_integer(-2, -3)
    -5

    #One positive int and one negative int
    >>> add_integer(-2, 3)
    1

    #One positive int and one negative int
    >>> add_integer(2, -3)
    -1

    #One positive int
    >>> add_integer(2)
    100

    #One negative int
    >>> add_integer(-2)
    96

    #Two positive float
    >>> add_integer(2.0, 3.4)
    5

    #Two negative float
    >>> add_integer(-2.2, -3.0)
    -5

    #One positive float and one negative float
    >>> add_integer(-2.1, 3.0)
    1

    #One positive float and one negative float
    >>> add_integer(2.2, -3.0)
    -1

    #One positive float
    >>> add_integer(2.9)
    100

    #One negative float
    >>> add_integer(-2.8)
    96

Non-Numbers
===========

    #No argument
    >>> print(add_integer())
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

    #One None
    >>> print(add_integer(None))
    Traceback (most recent call last):
    TypeError: a must be an integer

    #Two None
    >>> print(add_integer(None, None))
    Traceback (most recent call last):
    TypeError: a must be an integer

    #None in a
    >>> print(add_integer(None, 4))
    Traceback (most recent call last):
    TypeError: a must be an integer

    #None in b
    >>> print(add_integer(3, None))
    Traceback (most recent call last):
    TypeError: b must be an integer

    #Non-int in a
    >>> print(add_integer(123a4, 4))
    Traceback (most recent call last):
    SyntaxError: invalid syntax

    #Non-float in b
    >>> print(add_integer(4, 123.a4))
    Traceback (most recent call last):
    SyntaxError: invalid syntax

    #String in b
    >>> print(add_integer(4, "Holberton"))
    Traceback (most recent call last):
    TypeError: b must be an integer

    #String in a
    >>> print(add_integer("Holberton", 4))
    Traceback (most recent call last):
    TypeError: a must be an integer

    #Tuple in a
    >>> print(add_integer((1, ), 4))
    Traceback (most recent call last):
    TypeError: a must be an integer

    #Tuple in b
    >>> print(add_integer(4, (1, )))
    Traceback (most recent call last):
    TypeError: b must be an integer

    #List in a
    >>> print(add_integer([1, 2], 4))
    Traceback (most recent call last):
    TypeError: a must be an integer

    #List in b
    >>> print(add_integer(4, [1, 2]))
    Traceback (most recent call last):
    TypeError: b must be an integer

    #Bool in a
    >>> print(add_integer(True, 4))
    Traceback (most recent call last):
    TypeError: a must be an integer

    #Bool in b
    >>> print(add_integer(4, False))
    Traceback (most recent call last):
    TypeError: b must be an integer

    #Empty dictionary in a
    >>> print(add_integer({}, 4))
    Traceback (most recent call last):
    TypeError: a must be an integer

    #Empty dictionary in b
    >>> print(add_integer(4, {}))
    Traceback (most recent call last):
    TypeError: b must be an integer

    #Dictionary in a
    >>> print(add_integer({"a": 1}, 4))
    Traceback (most recent call last):
    TypeError: a must be an integer

    #Dictionary in b
    >>> print(add_integer(4, {"a": 1}))
    Traceback (most recent call last):
    TypeError: b must be an integer

    #Variable undefined as a, positive b
    >>> add_integer(undefined, 2)
    Traceback (most recent call last):
    NameError: name 'undefined' is not defined

    #Positive a, variable undefined as b
    >>> add_integer(2, undefined)
    Traceback (most recent call last):
    NameError: name 'undefined' is not defined

    #Variable undefined as a, variable undefined as b
    >>> add_integer(undefined, undefined)
    Traceback (most recent call last):
    NameError: name 'undefined' is not defined
